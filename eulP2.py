# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.
# Instead of brute forcing and detecting even numbers through mod2 I decided to
# use number theory to use everythird number. Using known rules such as the
# sum of two even numbers is even I constructed the equation
# (a)F3n = (b)2F3n - (c)F3(n-1) + 3 a is the desired even Fibonacci number
# and b is even because it is mulitplied by two. To prove c is even I used
# induction. Given that f3(n-1) + 3 through induction n =1 and n = k+1
# this was proved therefor any following fibonaci number that is divisble by 3
# can be shown as the sum of two even numbers therefore it is even.

import time

def fibonacciSum(n):

    fib_a = 0
    fib_b = 1
    fib_c = 2
    sum = 0
    count = 0

    while(fib_c < n):
        if ( count == 3):
            sum = sum + fib_c
            count = 0

        fib_a = fib_b
        fib_b = fib_c
        fib_c = fib_a + fib_b
        count = count + 1

    return  sum

start = time.time()
evenSum = fibonacciSum(4000000)
time = (time.time() - start)
print (f"The sum is {evenSum} and the time it took is {time} seconds")
